import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:loopin_mvp/screens/qr_scan_screen.dart';
import '../services/firestore/rental_service.dart';
import '../services/firestore/station_service.dart';
import '../services/firestore/log_service.dart';
import '../widgets/loading_dialog.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final User? user = FirebaseAuth.instance.currentUser;
  String? rentalStatus;
  String? stationId;
  bool isLoading = true;
  int passCount = 0;

  @override
  void initState() {
    super.initState();
    _fetchRentalStatus();
  }

  Future<void> _fetchRentalStatus() async {
    if (user == null) return;

    final status = await RentalService.getRentalStatus();
    String? fetchedStationId;
    final count = await RentalService.getRemainingPassCount(user!.uid);

    if (status == 'rented') {
      final rentalDoc = await RentalService.getRentalDoc();
      fetchedStationId = rentalDoc?.data()?['stationId'];
    }

    setState(() {
      rentalStatus = status;
      stationId = fetchedStationId;
      isLoading = false;
      passCount = count;
    });
  }

  Future<void> _handleRentalAction(String action) async {
    final scannedStationId = await Navigator.push<String>(
      context,
      MaterialPageRoute(builder: (_) => const QRScanScreen()),
    );

    debugPrint('[handleRentalAction] Ïä§Ï∫î Í≤∞Í≥º: $scannedStationId');

    if (scannedStationId == null) {
      debugPrint('[handleRentalAction] Ïä§Ï∫î Ïã§Ìå®, Î¶¨ÌÑ¥');
      return;
    }

    await Future.delayed(const Duration(milliseconds: 100));

    final dialogFuture = showLoadingDialog(
      context,
      message: action == 'rent' ? 'ÎåÄÏó¨ Ï≤òÎ¶¨ Ï§ë...' : 'Î∞òÎÇ© Ï≤òÎ¶¨ Ï§ë...',
    );

    Future.microtask(() async {
      try {
        if (action == 'rent') {
          final hasPass = await RentalService.hasValidPass(user!.uid);
          if (!hasPass) {
            if (mounted) {
              ScaffoldMessenger.of(
                context,
              ).showSnackBar(const SnackBar(content: Text('Ïù¥Ïö©Í∂åÏù¥ ÏóÜÏäµÎãàÎã§.')));
            }
            return;
          }

          await StationService.rentFromStation(scannedStationId);
          await RentalService.rentForUser(scannedStationId);
          await LogService.addRentalLog(
            userId: user!.uid,
            stationId: scannedStationId,
            action: 'rent',
          );
        } else if (action == 'return') {
          await StationService.returnToStation(scannedStationId);
          await RentalService.returnForUser();
          await LogService.addRentalLog(
            userId: user!.uid,
            stationId: scannedStationId,
            action: 'return',
          );
        }

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('[$scannedStationId] Ïö∞ÏÇ∞ $action ÏôÑÎ£å!')),
          );
          _fetchRentalStatus();
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(
            context,
          ).showSnackBar(SnackBar(content: Text('Ïò§Î•ò Î∞úÏÉù: $e')));
        }
      } finally {
        if (Navigator.canPop(context)) {
          Navigator.pop(context);
        }
      }
    });

    await dialogFuture;
  }

  Future<void> _handleIssueTestPass() async {
    try {
      await RentalService.issueTestPass();
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('ÌÖåÏä§Ìä∏Ïö© Ïù¥Ïö©Í∂åÏù¥ Î∞úÍ∏âÎêòÏóàÏäµÎãàÎã§.')));
      _fetchRentalStatus();
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Ïù¥Ïö©Í∂å Î∞úÍ∏â Ïã§Ìå®: $e')));
    }
  }

  @override
  Widget build(BuildContext context) {
    if (user == null) {
      return const Scaffold(body: Center(child: Text('Î°úÍ∑∏Ïù∏ Ïò§Î•ò')));
    }

    return Scaffold(
      appBar: AppBar(title: const Text('ÎìúÎ¶¨ÏõÄ Ìôà')),
      body:
          isLoading
              ? const Center(child: CircularProgressIndicator())
              : Padding(
                padding: const EdgeInsets.symmetric(horizontal: 24.0),
                child: Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        user!.isAnonymous
                            ? 'ÏùµÎ™Ö ÏÇ¨Ïö©ÏûêÎ°ú Î°úÍ∑∏Ïù∏ Ï§ë'
                            : 'ÌôòÏòÅÌï©ÎãàÎã§, ${user!.displayName ?? 'ÏÇ¨Ïö©Ïûê'}',
                        style: const TextStyle(
                          fontSize: 22,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF21c3c5),
                        ),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 24),
                      Text(
                        rentalStatus == 'rented'
                            ? '‚úÖ ÌòÑÏû¨ Ïö∞ÏÇ∞ ÎåÄÏó¨ Ï§ë'
                            : 'üÖæÔ∏è ÎåÄÏó¨ Ï§ëÏù∏ Ïö∞ÏÇ∞ ÏóÜÏùå',
                        style: const TextStyle(fontSize: 18),
                      ),
                      if (rentalStatus == 'rented' && stationId != null) ...[
                        const SizedBox(height: 8),
                        Text(
                          'ÎåÄÏó¨ÏÜå ID: $stationId',
                          style: const TextStyle(
                            fontSize: 16,
                            color: Colors.grey,
                          ),
                        ),
                      ],
                      const SizedBox(height: 8),
                      Text(
                        'ÎÇ®ÏùÄ Ïù¥Ïö©Í∂å: $passCountÍ∞ú',
                        style: const TextStyle(fontSize: 16),
                      ),
                      const SizedBox(height: 32),
                      ElevatedButton(
                        onPressed:
                            () => _handleRentalAction(
                              rentalStatus == 'rented' ? 'return' : 'rent',
                            ),
                        child: Text(
                          rentalStatus == 'rented'
                              ? 'Ïö∞ÏÇ∞ Î∞òÎÇ©ÌïòÍ∏∞ (QR Ïä§Ï∫î)'
                              : 'Ïö∞ÏÇ∞ ÎåÄÏó¨ÌïòÍ∏∞ (QR Ïä§Ï∫î)',
                        ),
                      ),
                      const SizedBox(height: 12),
                      OutlinedButton(
                        onPressed: _handleIssueTestPass,
                        child: const Text('ÌÖåÏä§Ìä∏Ïö© Ïù¥Ïö©Í∂å Î∞õÍ∏∞'),
                      ),
                      const SizedBox(height: 12),
                      OutlinedButton.icon(
                        onPressed: () => Navigator.pushNamed(context, '/map'),
                        icon: const Icon(Icons.map),
                        label: const Text('Ï£ºÎ≥Ä ÎåÄÏó¨ÏÜå Î≥¥Í∏∞'),
                      ),
                    ],
                  ),
                ),
              ),
    );
  }
}
